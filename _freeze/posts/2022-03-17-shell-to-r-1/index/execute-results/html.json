{
  "hash": "dc98e35974a6f294f5ea8965bfb447d7",
  "result": {
    "markdown": "---\ntitle: Open and Create R project from Shell\ndescription: \"A fun tutorial involving zsh & R code\"\ndate: 2022-03-17\nauthor: \"Kittipos Sirivongrungson\"\ndraft: false # Will render locally only\ncategories: [\"R\", \"Shell\"]\nimage: feature.jpg\n---\n\n\n\n\nI am an **R** user who know a little bit of **linux shell**, one day I wonder...\n\n-   How do I **navigate and open R project** from the shell, and\n\n-   How do I **create R project** from the shell\n\nThis blog post will show you how to do that and hopefully you'll learn something new and enjoy using it!\n\n**What you'll need**\n\n-   A basic knowledge of **linux shell** and **shell scripting**\n-   Most of your R project should be in one place\n\nIn the next demonstraction, I'll walk you through by creating a **shell function** which you have to store it in `~/.bashrc` or `~/.zshrc` (or other locations that can be sourced) by yourself.\n\nBefore I started, I using macOs, and my shell is **zsh** running in a Terminal app. If you are using different shell, modify the code correspondingly.\n\n::: {.cell}\n\n```{.zsh .cell-code}\n$SHELL --version\n```\n\n\n::: {.cell-output-stdout}\n```\nzsh 5.8 (x86_64-apple-darwin21.0)\n```\n:::\n:::\n\n# Navigate & Open R project\n\n## Quick Navigation\n\nHow to navigate to an R project quickly ? Lots of options can do it without using a mouse, e.g. using Spotlight Search in mac, but to day I'll use **command line**.\n\nI like to group *most* of my R projects in a single directory (i.e. `R_programming`) so that I can navigate easily even with GUI. That will helpful when using CLI too.\n\nYou might already know `cd` command which change directory of a terminal, but typing `cd` multiple times can be time consuming.\n\n> A simple solution is to creating a **shell function** to change directory to a parent folder which contains R projects.\n\n::: {.cell}\n\n```{.zsh .cell-code}\n# Define a function to change directory\ncdrpg(){\n    cd \"/Users/kittipos/Desktop/R_Programming\"\n}\n\n# Call function to change directory to `R_Programming/`\ncdrpg\n\n# Print working directory\npwd\n```\n\n\n::: {.cell-output-stdout}\n```\n/Users/kittipos/Desktop/R_Programming\n```\n:::\n:::\n\nIn the code above.[^1]\n\n[^1]: You can also define an `alias` instead of function, but I like to use function because It can handle larger code better. Also, another way is to assign path to a `$VARIABLE` and `cd $VARIABLE`, but you might have to type more characters.\n\n1.  I define a shell function `cdrpg()` that change directory to my `R_programming` folder\n\n2.  I execute `cdrpg`, and the directory is then changed (to call function in shell, you don't use parenthesis).\n\n3.  Call `pwd` to confirm the location at `R_Programming` directory\n\nFor me, I store this function in a `.zsh` file that can be sourced by `~/.zshrc`\n\n**`cd-to.zsh`**\n\n``` zsh\n#!/bin/zsh\n\n# CD to R_Programming Folder\ncdrpg(){\n    cd \"/Users/kittipos/Desktop/R_Programming\"\n}\n```\n\nAnd, make it executable by:\n\n``` zsh\nchmod +x \"cd-to.zsh\"\n```\n\nSo that every time I open shell, I could call `cdrpg`, and I would arriving at `R_Programming` directory.\n\nAnd I also define similar functions to `cd` to other frequently-visited locations in this `cd-to.zsh` script as well.\n\n## Open R project\n\nAfter I've arrived at `R_Programming/` and `cd` to the sub-directory I wanted, I can open R project from shell with the following command\n\n``` zsh\nopen *.Rproj\n```\n\nThe result is similar to clicking `.Rproj` icon to open an RStudio project.\n\nTo save typing, I wrap this into `openrpg()` function and store it in a shell script which can be sourced by `~/.zshrc`\n\n**`r-proj.zsh`**\n\n``` zsh\n#!/bin/zsh\n# A function to open R project in current directory\nopenrpg(){\n    open *.Rproj\n}\n```\n\nAnd, make it executable by:\n\n``` zsh\nchmod +x \"r-proj.zsh\"\n```\n\n# Create R Project\n\nNow, the last part is a little bit tricky!\n\nFirst, let's me show the easy way to do in shell by executing R code directly.\n\n## Using Radian Console\n\nThe [radian](https://github.com/randy3k/radian) is a modern R console in the shell. First, enter R by running `radian`, then type any R code. The result looks pretty.\n\n![](img/radian-iris.png)\n\nTo create a new project, you can use [`usethis::create_project(\"path-to-project\")`](https://usethis.r-lib.org/reference/create_package.html)\n\n![](img/radian-create-proj.png)\n\nIt's done!, however, there is quite a bit of typing.\n\nNext, I'll show you to all of this *plus* open an R project being created all in one line of code with fewer characters.\n\n## Create R Project directly from Shell\n\n### The Goal\n\n**What I want to achieve is this...**\n\nIf I run this command in shell,\n\n``` zsh\nnewrpj \"foo\"\n```\n\nthe R project \"foo\" should be created, then in my terminal it should `cd` to `foo/` directory, and open `foo.Rproj` file in RStudio.\n\nWe'll need to do a couple of things:\n\n1.  Execute that R script from Shell, and also passing R project name as shell argument.\n2.  Put all necessary R functions in an R script. I'll call it `new-rpj.R`\n3.  Wrap all shell commands into one shell function\n\n### Execute R Script from Shell\n\n[Command Line Basics for R Users](https://bash-intro.rsquaredacademy.com/r-command-line.html) show that `Rscript` command is the way to execute R script from shell.\n\nThe basic usage is quite simple.\n\n``` zsh\nRscript \"/Users/kittipos/bin-ks/helper/R/new-rpg.R\" \"foo\"\n```\n\nThis will execute `new-rpj.R`, and \"foo\" is a shell argument to be passed to the script.\n\n### Write R Script\n\nNow, let's edit `new-rpj.R`\n\n**new-rpj.R**\n\n``` r\n# Retrieve Shell arguments\narg <- commandArgs(trailingOnly = TRUE)[1]\n\n# Show what parameter is being recieved\ncat(\"- Passing zsh parameter:\", arg)\n\n# Create R Project using name we've supply\nusethis::create_project(arg, rstudio = TRUE)\n```\n\n1.  `commandArgs()` is a function to retrieve shell arguments, `trailingOnly = TRUE` will only get the one that we've supply, for more example [see r-bloggers post](https://www.r-bloggers.com/2015/02/bashr-howto-pass-parameters-from-bash-script-to-r/).\n\n2.  Assign the first shell argument to `arg`\n\n3.  `cat()` to confirm the passing parameter.\n\n4.  Lastly, `usethis::create_project()` to create an R project with name from `arg`. Use `rstudio = TRUE` to also create `.Rproj` file.\n\nAfter saving this script `new-rpg.R`, try running this in the shell:\n\n``` zsh\nRscript \"/Users/kittipos/bin-ks/helper/R/new-rpg.R\" \"foo\"\n```\n\nIt should create R project \"foo\" as a sub-directory of your current working directory.\n\n### Wrap up everything\n\nFinally, let's wrap-up everything by building `newrpj` function to create R project, change directory to the project folder, and open the project in RStudio.\n\nI store this function in `r-proj.zsh` which can be sourced by `~/.zshrc`.\n\n**`r-proj.zsh`**\n\n``` zsh\n#!/bin/zsh\n## Function to create new R Project, `cd` to the project, and open in RStudio\nnewrpj(){\n    # Create R project in a sub-directory with names from shell 1st argument\n    Rscript \"/Users/kittipos/bin-ks/helper/R/new-rpj.R\" \"$1\"\n    # Go into that sub-directory & Open R project in RStudio\n    cd \"$1\"\n    open *.Rproj\n}\n```\n\n-   Notice `$1` which is a [shell variable](https://www.shellscript.sh/variables2.html) that represents the first argument supplies to the `newrpj()` function, which, in this case, is an R project name.\n\nHere is the result of calling `newrpj` with argument \"tester\"\n\n1.  Created RStudio project named **\"tester\"**\n\n2.  Change working directory to **tester**, and\n\n3.  Open RStudio\n\n![](img/newrpj.png)\n\n![](img/tester-rstudio.png)",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": [],
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}