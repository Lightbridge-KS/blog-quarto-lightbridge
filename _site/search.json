[
  {
    "objectID": "posts/2022-03-17-shell-to-r-1/index.html",
    "href": "posts/2022-03-17-shell-to-r-1/index.html",
    "title": "Open and Create R project from Shell",
    "section": "",
    "text": "I am an R user who know a little bit of linux shell, one day I wonder‚Ä¶\nThis blog post will show you how to do that and hopefully you‚Äôll learn something new and enjoy using it!\nWhat you‚Äôll need\nIn the next demonstraction, I‚Äôll walk you through by creating a shell function which you have to store it in ~/.bashrc or ~/.zshrc (or other locations that can be sourced) by yourself.\nBefore I started, I using macOs, and my shell is zsh running in a Terminal app. If you are using different shell, modify the code correspondingly."
  },
  {
    "objectID": "posts/2022-03-17-shell-to-r-1/index.html#quick-navigation",
    "href": "posts/2022-03-17-shell-to-r-1/index.html#quick-navigation",
    "title": "Open and Create R project from Shell",
    "section": "Quick Navigation",
    "text": "Quick Navigation\nHow to navigate to an R project quickly ? Lots of options can do it without using a mouse, e.g.¬†using Spotlight Search in mac, but to day I‚Äôll use command line.\nI like to group most of my R projects in a single directory (i.e.¬†R_programming) so that I can navigate easily even with GUI. That will helpful when using CLI too.\nYou might already know cd command which change directory of a terminal, but typing cd multiple times can be time consuming.\n\nA simple solution is to creating a shell function to change directory to a parent folder which contains R projects.\n\n\n# Define a function to change directory\ncdrpg(){\n    cd \"/Users/kittipos/Desktop/R_Programming\"\n}\n\n# Call function to change directory to `R_Programming/`\ncdrpg\n\n# Print working directory\npwd\n\n/Users/kittipos/Desktop/R_Programming\n\n\nIn the code above.1\n\nI define a shell function cdrpg() that change directory to my R_programming folder\nI execute cdrpg, and the directory is then changed (to call function in shell, you don‚Äôt use parenthesis).\nCall pwd to confirm the location at R_Programming directory\n\nFor me, I store this function in a .zsh file that can be sourced by ~/.zshrc\ncd-to.zsh\n#!/bin/zsh\n\n# CD to R_Programming Folder\ncdrpg(){\n    cd \"/Users/kittipos/Desktop/R_Programming\"\n}\nAnd, make it executable by:\nchmod +x \"cd-to.zsh\"\nSo that every time I open shell, I could call cdrpg, and I would arriving at R_Programming directory.\nAnd I also define similar functions to cd to other frequently-visited locations in this cd-to.zsh script as well."
  },
  {
    "objectID": "posts/2022-03-17-shell-to-r-1/index.html#open-r-project",
    "href": "posts/2022-03-17-shell-to-r-1/index.html#open-r-project",
    "title": "Open and Create R project from Shell",
    "section": "Open R project",
    "text": "Open R project\nAfter I‚Äôve arrived at R_Programming/ and cd to the sub-directory I wanted, I can open R project from shell with the following command\nopen *.Rproj\nThe result is similar to clicking .Rproj icon to open an RStudio project.\nTo save typing, I wrap this into openrpg() function and store it in a shell script which can be sourced by ~/.zshrc\nr-proj.zsh\n#!/bin/zsh\n# A function to open R project in current directory\nopenrpg(){\n    open *.Rproj\n}\nAnd, make it executable by:\nchmod +x \"r-proj.zsh\""
  },
  {
    "objectID": "posts/2022-03-17-shell-to-r-1/index.html#using-radian-console",
    "href": "posts/2022-03-17-shell-to-r-1/index.html#using-radian-console",
    "title": "Open and Create R project from Shell",
    "section": "Using Radian Console",
    "text": "Using Radian Console\nThe radian is a modern R console in the shell. First, enter R by running radian, then type any R code. The result looks pretty.\n\nTo create a new project, you can use usethis::create_project(\"path-to-project\")\n\nIt‚Äôs done!, however, there is quite a bit of typing.\nNext, I‚Äôll show you to all of this plus open an R project being created all in one line of code with fewer characters."
  },
  {
    "objectID": "posts/2022-03-17-shell-to-r-1/index.html#create-r-project-directly-from-shell",
    "href": "posts/2022-03-17-shell-to-r-1/index.html#create-r-project-directly-from-shell",
    "title": "Open and Create R project from Shell",
    "section": "Create R Project directly from Shell",
    "text": "Create R Project directly from Shell\n\nThe Goal\nWhat I want to achieve is this‚Ä¶\nIf I run this command in shell,\nnewrpj \"foo\"\nthe R project ‚Äúfoo‚Äù should be created, then in my terminal it should cd to foo/ directory, and open foo.Rproj file in RStudio.\nWe‚Äôll need to do a couple of things:\n\nExecute that R script from Shell, and also passing R project name as shell argument.\nPut all necessary R functions in an R script. I‚Äôll call it new-rpj.R\nWrap all shell commands into one shell function\n\n\n\nExecute R Script from Shell\nCommand Line Basics for R Users show that Rscript command is the way to execute R script from shell.\nThe basic usage is quite simple.\nRscript \"/Users/kittipos/bin-ks/helper/R/new-rpg.R\" \"foo\"\nThis will execute new-rpj.R, and ‚Äúfoo‚Äù is a shell argument to be passed to the script.\n\n\nWrite R Script\nNow, let‚Äôs edit new-rpj.R\nnew-rpj.R\n# Retrieve Shell arguments\narg <- commandArgs(trailingOnly = TRUE)[1]\n\n# Show what parameter is being recieved\ncat(\"- Passing zsh parameter:\", arg)\n\n# Create R Project using name we've supply\nusethis::create_project(arg, rstudio = TRUE)\n\ncommandArgs() is a function to retrieve shell arguments, trailingOnly = TRUE will only get the one that we‚Äôve supply, for more example see r-bloggers post.\nAssign the first shell argument to arg\ncat() to confirm the passing parameter.\nLastly, usethis::create_project() to create an R project with name from arg. Use rstudio = TRUE to also create .Rproj file.\n\nAfter saving this script new-rpg.R, try running this in the shell:\nRscript \"/Users/kittipos/bin-ks/helper/R/new-rpg.R\" \"foo\"\nIt should create R project ‚Äúfoo‚Äù as a sub-directory of your current working directory.\n\n\nWrap up everything\nFinally, let‚Äôs wrap-up everything by building newrpj function to create R project, change directory to the project folder, and open the project in RStudio.\nI store this function in r-proj.zsh which can be sourced by ~/.zshrc.\nr-proj.zsh\n#!/bin/zsh\n## Function to create new R Project, `cd` to the project, and open in RStudio\nnewrpj(){\n    # Create R project in a sub-directory with names from shell 1st argument\n    Rscript \"/Users/kittipos/bin-ks/helper/R/new-rpj.R\" \"$1\"\n    # Go into that sub-directory & Open R project in RStudio\n    cd \"$1\"\n    open *.Rproj\n}\n\nNotice $1 which is a shell variable that represents the first argument supplies to the newrpj() function, which, in this case, is an R project name.\n\nHere is the result of calling newrpj with argument ‚Äútester‚Äù\n\nCreated RStudio project named ‚Äútester‚Äù\nChange working directory to tester, and\nOpen RStudio"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\nR\n\n\nShell\n\n\nFun-Idea\n\n\n\n\nA fun tutorial involving zsh & R code\n\n\n\n\n\n\nMar 17, 2022\n\n\nKittipos Sirivongrungson\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Lightbridge",
    "section": "",
    "text": "Email\n  Github\n\n  \n  \nHi üëã, I am a medical doctor who gains interest in software developing and data science. I love computer software and developing tools for others and myself to use in real life and also for fun.\nMy first programming language is R, and now it is my favorite tool to analyse data, build R-package, and build cool shiny application."
  }
]